package org.example;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {

	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	@Autowired
	private WarehouseRepository warehouseRepository;
	@Autowired
	private ProductRepository productRepository;

	@RequestMapping("/")
	public String main() {
		String mainPage = "Hallo Spencer";
		System.out.println("Hallo Spencer");
		return mainPage;
	}

	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {

		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}
	@PostMapping(path="/addWarehouse")
	public @ResponseBody String addNewWarehouse(@RequestParam int warehouseid, @RequestParam String warehousename, @RequestParam String warehouseaddress,
												@RequestParam String warehousepostalcode, @RequestParam String warehousecity, @RequestParam String warehousecountry, @RequestParam String timestamp) {
		Warehouse w = new Warehouse();
		w.setWarehouseaddress(warehouseaddress);
		w.setWarehouseid(warehouseid);
		w.setWarehousename(warehousename);
		w.setWarehousepostalcode(warehousepostalcode);
		w.setWarehousecity(warehousecity);
		w.setWarehousecountry(warehousecountry);
		w.setTimestamp(timestamp);
		warehouseRepository.save(w);
		return "Saved";
	}
	@PostMapping(path="/addProduct")
	public @ResponseBody String addNewProduct(@RequestParam String warehousename, @RequestParam int productid, @RequestParam String productname, @RequestParam String productcategory, @RequestParam String productquantity, @RequestParam String productunit) {
		Product p = new Product();
		p.setProductid(productid);
		p.setProductname(productname);
		p.setProductcategory(productcategory);
		p.setProductquantity(productquantity);
		p.setProductunit(productunit);
		productRepository.save(p);
		Iterable<Warehouse> liste = warehouseRepository.findAll();
		for(Warehouse w : liste) {
			if(w.getWarehousename().equals(warehousename)) {
				w.addProduct(p);
				System.out.println("Added product");
				warehouseRepository.save(w);
			}
		}
		return "Saved";
	}
	@GetMapping(path="/updateWarehouse")
	public @ResponseBody void updateWarehouse(@RequestParam int warehouseid, @RequestParam String warehousename) {
		warehouseRepository.findById(warehouseid).get().setWarehousename(warehousename);
		warehouseRepository.save(warehouseRepository.findById(warehouseid).get());
	}

	@GetMapping(path="/allUsers")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		System.out.println("getAllUsers");
		return userRepository.findAll();
	}
	@GetMapping(path="/allWarehouses")
	public @ResponseBody Iterable<Warehouse> getAllWarehouses() {
		System.out.println("getAllWarehouses");
		return warehouseRepository.findAll();
	}

	@GetMapping(path="/getWarehouse")
	public @ResponseBody Warehouse getWarehouse(@RequestParam int warehouseid) {
		if(warehouseRepository.existsById(warehouseid)) {
			return warehouseRepository.findById(warehouseid).get();
		} else {
			return null;
		}
	}

	@GetMapping(path="getProduct")
	public @ResponseBody Product getProduct(@RequestParam int warehouseid, @RequestParam int productid) {
		if(warehouseRepository.existsById(warehouseid)) {
			return warehouseRepository.findById(warehouseid).get().getProduct(productid);
		} else {
			return null;
		}
	}
}
